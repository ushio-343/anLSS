Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> statement_list
Rule 2     statement_list -> statement
Rule 3     statement_list -> statement_list statement
Rule 4     statement -> declaration
Rule 5     statement -> for_loop
Rule 6     statement -> block
Rule 7     statement -> println
Rule 8     declaration -> INT ID SEMICOLON
Rule 9     for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block
Rule 10    assignment -> ID EQUALS NUMBER
Rule 11    condition -> ID LT NUMBER
Rule 12    condition -> ID GT NUMBER
Rule 13    condition -> ID LE NUMBER
Rule 14    condition -> ID GE NUMBER
Rule 15    condition -> ID EQ NUMBER
Rule 16    condition -> ID NE NUMBER
Rule 17    increment -> ID PLUSPLUS
Rule 18    block -> LBRACE statement_list RBRACE
Rule 19    println -> PRINTLN LPAREN ID RPAREN SEMICOLON

Terminals, with rules where they appear

EQ                   : 15
EQUALS               : 10
FOR                  : 9
GE                   : 14
GT                   : 12
ID                   : 8 10 11 12 13 14 15 16 17 19
INT                  : 8
LBRACE               : 18
LE                   : 13
LPAREN               : 9 19
LT                   : 11
NE                   : 16
NUMBER               : 10 11 12 13 14 15 16
PLUSPLUS             : 17
PRINTLN              : 19
RBRACE               : 18
RPAREN               : 9 19
SEMICOLON            : 8 9 9 19
error                : 

Nonterminals, with rules where they appear

assignment           : 9
block                : 6 9
condition            : 9
declaration          : 4
for_loop             : 5
increment            : 9
println              : 7
program              : 0
statement            : 2 3
statement_list       : 1 3 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . statement_list
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . for_loop
    (6) statement -> . block
    (7) statement -> . println
    (8) declaration -> . INT ID SEMICOLON
    (9) for_loop -> . FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block
    (18) block -> . LBRACE statement_list RBRACE
    (19) println -> . PRINTLN LPAREN ID RPAREN SEMICOLON

    INT             shift and go to state 8
    FOR             shift and go to state 9
    LBRACE          shift and go to state 10
    PRINTLN         shift and go to state 11

    program                        shift and go to state 1
    statement_list                 shift and go to state 2
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    for_loop                       shift and go to state 5
    block                          shift and go to state 6
    println                        shift and go to state 7

state 1

    (0) S' -> program .



state 2

    (1) program -> statement_list .
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . for_loop
    (6) statement -> . block
    (7) statement -> . println
    (8) declaration -> . INT ID SEMICOLON
    (9) for_loop -> . FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block
    (18) block -> . LBRACE statement_list RBRACE
    (19) println -> . PRINTLN LPAREN ID RPAREN SEMICOLON

    $end            reduce using rule 1 (program -> statement_list .)
    INT             shift and go to state 8
    FOR             shift and go to state 9
    LBRACE          shift and go to state 10
    PRINTLN         shift and go to state 11

    statement                      shift and go to state 12
    declaration                    shift and go to state 4
    for_loop                       shift and go to state 5
    block                          shift and go to state 6
    println                        shift and go to state 7

state 3

    (2) statement_list -> statement .

    INT             reduce using rule 2 (statement_list -> statement .)
    FOR             reduce using rule 2 (statement_list -> statement .)
    LBRACE          reduce using rule 2 (statement_list -> statement .)
    PRINTLN         reduce using rule 2 (statement_list -> statement .)
    $end            reduce using rule 2 (statement_list -> statement .)
    RBRACE          reduce using rule 2 (statement_list -> statement .)


state 4

    (4) statement -> declaration .

    INT             reduce using rule 4 (statement -> declaration .)
    FOR             reduce using rule 4 (statement -> declaration .)
    LBRACE          reduce using rule 4 (statement -> declaration .)
    PRINTLN         reduce using rule 4 (statement -> declaration .)
    $end            reduce using rule 4 (statement -> declaration .)
    RBRACE          reduce using rule 4 (statement -> declaration .)


state 5

    (5) statement -> for_loop .

    INT             reduce using rule 5 (statement -> for_loop .)
    FOR             reduce using rule 5 (statement -> for_loop .)
    LBRACE          reduce using rule 5 (statement -> for_loop .)
    PRINTLN         reduce using rule 5 (statement -> for_loop .)
    $end            reduce using rule 5 (statement -> for_loop .)
    RBRACE          reduce using rule 5 (statement -> for_loop .)


state 6

    (6) statement -> block .

    INT             reduce using rule 6 (statement -> block .)
    FOR             reduce using rule 6 (statement -> block .)
    LBRACE          reduce using rule 6 (statement -> block .)
    PRINTLN         reduce using rule 6 (statement -> block .)
    $end            reduce using rule 6 (statement -> block .)
    RBRACE          reduce using rule 6 (statement -> block .)


state 7

    (7) statement -> println .

    INT             reduce using rule 7 (statement -> println .)
    FOR             reduce using rule 7 (statement -> println .)
    LBRACE          reduce using rule 7 (statement -> println .)
    PRINTLN         reduce using rule 7 (statement -> println .)
    $end            reduce using rule 7 (statement -> println .)
    RBRACE          reduce using rule 7 (statement -> println .)


state 8

    (8) declaration -> INT . ID SEMICOLON

    ID              shift and go to state 13


state 9

    (9) for_loop -> FOR . LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block

    LPAREN          shift and go to state 14


state 10

    (18) block -> LBRACE . statement_list RBRACE
    (2) statement_list -> . statement
    (3) statement_list -> . statement_list statement
    (4) statement -> . declaration
    (5) statement -> . for_loop
    (6) statement -> . block
    (7) statement -> . println
    (8) declaration -> . INT ID SEMICOLON
    (9) for_loop -> . FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block
    (18) block -> . LBRACE statement_list RBRACE
    (19) println -> . PRINTLN LPAREN ID RPAREN SEMICOLON

    INT             shift and go to state 8
    FOR             shift and go to state 9
    LBRACE          shift and go to state 10
    PRINTLN         shift and go to state 11

    statement_list                 shift and go to state 15
    statement                      shift and go to state 3
    declaration                    shift and go to state 4
    for_loop                       shift and go to state 5
    block                          shift and go to state 6
    println                        shift and go to state 7

state 11

    (19) println -> PRINTLN . LPAREN ID RPAREN SEMICOLON

    LPAREN          shift and go to state 16


state 12

    (3) statement_list -> statement_list statement .

    INT             reduce using rule 3 (statement_list -> statement_list statement .)
    FOR             reduce using rule 3 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 3 (statement_list -> statement_list statement .)
    PRINTLN         reduce using rule 3 (statement_list -> statement_list statement .)
    $end            reduce using rule 3 (statement_list -> statement_list statement .)
    RBRACE          reduce using rule 3 (statement_list -> statement_list statement .)


state 13

    (8) declaration -> INT ID . SEMICOLON

    SEMICOLON       shift and go to state 17


state 14

    (9) for_loop -> FOR LPAREN . assignment SEMICOLON condition SEMICOLON increment RPAREN block
    (10) assignment -> . ID EQUALS NUMBER

    ID              shift and go to state 19

    assignment                     shift and go to state 18

state 15

    (18) block -> LBRACE statement_list . RBRACE
    (3) statement_list -> statement_list . statement
    (4) statement -> . declaration
    (5) statement -> . for_loop
    (6) statement -> . block
    (7) statement -> . println
    (8) declaration -> . INT ID SEMICOLON
    (9) for_loop -> . FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block
    (18) block -> . LBRACE statement_list RBRACE
    (19) println -> . PRINTLN LPAREN ID RPAREN SEMICOLON

    RBRACE          shift and go to state 20
    INT             shift and go to state 8
    FOR             shift and go to state 9
    LBRACE          shift and go to state 10
    PRINTLN         shift and go to state 11

    statement                      shift and go to state 12
    declaration                    shift and go to state 4
    for_loop                       shift and go to state 5
    block                          shift and go to state 6
    println                        shift and go to state 7

state 16

    (19) println -> PRINTLN LPAREN . ID RPAREN SEMICOLON

    ID              shift and go to state 21


state 17

    (8) declaration -> INT ID SEMICOLON .

    INT             reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    FOR             reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    LBRACE          reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    PRINTLN         reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    $end            reduce using rule 8 (declaration -> INT ID SEMICOLON .)
    RBRACE          reduce using rule 8 (declaration -> INT ID SEMICOLON .)


state 18

    (9) for_loop -> FOR LPAREN assignment . SEMICOLON condition SEMICOLON increment RPAREN block

    SEMICOLON       shift and go to state 22


state 19

    (10) assignment -> ID . EQUALS NUMBER

    EQUALS          shift and go to state 23


state 20

    (18) block -> LBRACE statement_list RBRACE .

    INT             reduce using rule 18 (block -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 18 (block -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 18 (block -> LBRACE statement_list RBRACE .)
    PRINTLN         reduce using rule 18 (block -> LBRACE statement_list RBRACE .)
    $end            reduce using rule 18 (block -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 18 (block -> LBRACE statement_list RBRACE .)


state 21

    (19) println -> PRINTLN LPAREN ID . RPAREN SEMICOLON

    RPAREN          shift and go to state 24


state 22

    (9) for_loop -> FOR LPAREN assignment SEMICOLON . condition SEMICOLON increment RPAREN block
    (11) condition -> . ID LT NUMBER
    (12) condition -> . ID GT NUMBER
    (13) condition -> . ID LE NUMBER
    (14) condition -> . ID GE NUMBER
    (15) condition -> . ID EQ NUMBER
    (16) condition -> . ID NE NUMBER

    ID              shift and go to state 26

    condition                      shift and go to state 25

state 23

    (10) assignment -> ID EQUALS . NUMBER

    NUMBER          shift and go to state 27


state 24

    (19) println -> PRINTLN LPAREN ID RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 28


state 25

    (9) for_loop -> FOR LPAREN assignment SEMICOLON condition . SEMICOLON increment RPAREN block

    SEMICOLON       shift and go to state 29


state 26

    (11) condition -> ID . LT NUMBER
    (12) condition -> ID . GT NUMBER
    (13) condition -> ID . LE NUMBER
    (14) condition -> ID . GE NUMBER
    (15) condition -> ID . EQ NUMBER
    (16) condition -> ID . NE NUMBER

    LT              shift and go to state 30
    GT              shift and go to state 31
    LE              shift and go to state 32
    GE              shift and go to state 33
    EQ              shift and go to state 34
    NE              shift and go to state 35


state 27

    (10) assignment -> ID EQUALS NUMBER .

    SEMICOLON       reduce using rule 10 (assignment -> ID EQUALS NUMBER .)


state 28

    (19) println -> PRINTLN LPAREN ID RPAREN SEMICOLON .

    INT             reduce using rule 19 (println -> PRINTLN LPAREN ID RPAREN SEMICOLON .)
    FOR             reduce using rule 19 (println -> PRINTLN LPAREN ID RPAREN SEMICOLON .)
    LBRACE          reduce using rule 19 (println -> PRINTLN LPAREN ID RPAREN SEMICOLON .)
    PRINTLN         reduce using rule 19 (println -> PRINTLN LPAREN ID RPAREN SEMICOLON .)
    $end            reduce using rule 19 (println -> PRINTLN LPAREN ID RPAREN SEMICOLON .)
    RBRACE          reduce using rule 19 (println -> PRINTLN LPAREN ID RPAREN SEMICOLON .)


state 29

    (9) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON . increment RPAREN block
    (17) increment -> . ID PLUSPLUS

    ID              shift and go to state 37

    increment                      shift and go to state 36

state 30

    (11) condition -> ID LT . NUMBER

    NUMBER          shift and go to state 38


state 31

    (12) condition -> ID GT . NUMBER

    NUMBER          shift and go to state 39


state 32

    (13) condition -> ID LE . NUMBER

    NUMBER          shift and go to state 40


state 33

    (14) condition -> ID GE . NUMBER

    NUMBER          shift and go to state 41


state 34

    (15) condition -> ID EQ . NUMBER

    NUMBER          shift and go to state 42


state 35

    (16) condition -> ID NE . NUMBER

    NUMBER          shift and go to state 43


state 36

    (9) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment . RPAREN block

    RPAREN          shift and go to state 44


state 37

    (17) increment -> ID . PLUSPLUS

    PLUSPLUS        shift and go to state 45


state 38

    (11) condition -> ID LT NUMBER .

    SEMICOLON       reduce using rule 11 (condition -> ID LT NUMBER .)


state 39

    (12) condition -> ID GT NUMBER .

    SEMICOLON       reduce using rule 12 (condition -> ID GT NUMBER .)


state 40

    (13) condition -> ID LE NUMBER .

    SEMICOLON       reduce using rule 13 (condition -> ID LE NUMBER .)


state 41

    (14) condition -> ID GE NUMBER .

    SEMICOLON       reduce using rule 14 (condition -> ID GE NUMBER .)


state 42

    (15) condition -> ID EQ NUMBER .

    SEMICOLON       reduce using rule 15 (condition -> ID EQ NUMBER .)


state 43

    (16) condition -> ID NE NUMBER .

    SEMICOLON       reduce using rule 16 (condition -> ID NE NUMBER .)


state 44

    (9) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN . block
    (18) block -> . LBRACE statement_list RBRACE

    LBRACE          shift and go to state 10

    block                          shift and go to state 46

state 45

    (17) increment -> ID PLUSPLUS .

    RPAREN          reduce using rule 17 (increment -> ID PLUSPLUS .)


state 46

    (9) for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .

    INT             reduce using rule 9 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .)
    FOR             reduce using rule 9 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .)
    LBRACE          reduce using rule 9 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .)
    PRINTLN         reduce using rule 9 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .)
    $end            reduce using rule 9 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .)
    RBRACE          reduce using rule 9 (for_loop -> FOR LPAREN assignment SEMICOLON condition SEMICOLON increment RPAREN block .)

